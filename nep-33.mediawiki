<pre>
  NEP: 33
  Title: Fixed/Dynamic Gas Contract Method Pricing
  Author: Christopher Schuchardt <cschuchardt88@gmail.com>
  Type: Standard
  Status: Draft
  Created: 2025-08-30
</pre>

==Abstract==

One may want to charge a fee for calling one of their contract methods. Allowing non-native contracts to have <code>fixed</code> or <code>dynamic</code>
pricing for methods within their contract then sendings the funds to the contract itself.

==Motivation==

Now contract owners, such as a exchange may want a way to get a little gas for sending funds to external wallets. This would allow the contract to have
one or several methods to have a <code>fixed</code> price, taking a bit of GAS from transactioner for calling the a method (Much like an opcode price works).
For example, a LP token maybe want you to pay gas for withdrawing funds. Reason most LP/Fund contracts do this to pay for the LP contract pool's 
transaction fees for adjusting prices and other things.

==Specification==

Contract will have a <code>JSON</code> string in their storage at prefix <code>0xfe</code>. At this storage location the <code>JSON</code> string will
contain all the meta data for each method name, amount and/or receiver address. 

When syscall <code>System.Contract.Call</code> calls a method within the contract it checks contract storage for <code>0xfe</code> prefix. If it exists
then will read the <code>JSON</code> string to see if the method exists. If the method does exist than will follow the following.

* Method
** Method must exist within the contract's manifest.
** If method doesn't exist within the manifest than entry is ignored.
** Method can not start with a underscore <code>_</code>. This limits malicious activity. For example if you were to require a fee for <code>_initialize</code>.
** Methods <code>verify</code>, <code>onNEP11Payment</code> and <code>onNEP17Payment</code> will be ignored.
* Amount
** If the amount doesn't exist. Then the smallest unit of GAS is used (_Datoshi_). _For example: GAS's small unit in Datoshi <code>0.00000001</code>_
** If the amount does exist. Than that unit amount will than be deducted.
** Amount can not be negative. If is negative than this entry is ignored.
* Receiver Address
** If receiver doesn't exist. Then the contract itself **SHOULD** have the <code>onNEP17Payment</code> method and **SHOULD** support NEP17 and accept GAS.
** If reciever does exist. Then the reciever address will be used. The reciever address can be a NEP17 contract. However that contract **SHOULD** accept GAS.
** If <code>0x0000000000000000000000000000000000000000</code> is used the amount is burnned no matter what.

===JSON Storage===

The <code>JSON</code> _below_ is an example of the storage value at <code>0xfe</code>.

<pre>
[
  {
    "name": "MyMethod"                                        // method name
    "amount": 1                                               // in Datoshi
    "receive": "0x0000000000000000000000000000000000000000"   // Receiver address in ScriptHash format
  }
]
</pre>

===Contract Methods===

Other contract creators may want to know the price of a contract's methods. To do so there is a method <code>required</code> to get price of any method
within the contract. This method is called <code>GetMethodPrice</code>. This method returns either a <code>JSON</code> array or object depending upon
how you call the method. The method has one argument (_parameter_). This argument is of type <code>String</code>. The argument takes in the name of the
method you want the price for. This method name **MUST** exist in the contract's manifest (_if it does not than the method does not exist within the contract_).
Passing in <code>null</code> tells the method to return a <code>JSON</code> Array of all the contract's methods that has fees associated with them. Otherwise
passing in a method name will return **ONLY** that entry. 

===JSON Method Entry===

====JSON Array====

Calling <code>GetMethodPrice</code> with <code>null</code>.
<pre>
[
  {
    "name": "MyMethod1"                                       // method name
    "amount": 1                                               // in Datoshi
    "receive": "0x0000000000000000000000000000000000000000"   // Receiver address in ScriptHash format
  },
  {
    "name": "MyMethod2"                                       // method name
    "amount": 100000000                                       // in Datoshi
    "receive": "0x0000000000000000000000000000000000000000"   // Receiver address in ScriptHash format
  }
]
</pre>

====JSON Object====

Calling <code>GetMethodPrice</code> with <code>MyMethod2</code>.
<pre>
{
  "name": "MyMethod2"                                       // method name
  "amount": 100000000                                       // in Datoshi
  "receive": "0x0000000000000000000000000000000000000000"   // Receiver address in ScriptHash format
}
</pre>

==Implementation==
