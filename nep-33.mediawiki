<pre>
  NEP: 33
  Title: Fixed/Dynamic Non-native Contract Method Pricing
  Author: Christopher Schuchardt <cschuchardt88@gmail.com>
  Type: Standard
  Status: Draft
  Created: 2025-08-30
</pre>

==Abstract==

One may want to charge a fee for calling one of their contract methods. Allowing non-native contracts to have <code>fixed</code> or <code>dynamic</code> pricing for methods within their contract then sendings the funds to the contract itself.

==Motivation==

Now contract owners, such as a exchange may want a way to get a little gas for sending funds to external wallets. This would allow the contract to have one or several methods to have a <code>fixed</code> price, taking a bit of GAS from transactioner for calling the a method (Much like an opcode price works). For example, a LP token maybe want you to pay a gas for withdrawing funds. Reason most LP/Fund contracts do this to pay for the LP contract pool's transaction fees for adjusting prices and other things.

==Specification==

The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current NEO platforms.

==Rationale==

The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages.

The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.

==Backwards Compatibility==

All NEPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The NEP must explain how the author proposes to deal with these incompatibilities. NEP submissions without a sufficient backwards compatibility treatise may be rejected outright.

==Test Cases==

Test cases for an implementation are mandatory for NEPs that are affecting consensus changes. Other NEPs can choose to include links to test cases if applicable.

==Implementation==

The implementations must be completed before any NEP is given status "Final", but it need not be completed before the NEP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.
